package cadenceerrors

import "fmt"

type (

	//CadenceError is a struct used to pass errors
	// generated by calls to the cadence server from the
	// cadence-proxy to the Neon.Cadence Library.
	CadenceError struct {
		String    *string
		Details   *string
		ErrorType *string
	}

	// CadenceErrorJSON is an intermediate struct that helps with the
	// marshalling and unmarshalling of a CadenceError struct
	CadenceErrorJSON struct {
		String    string `json:"String"`
		Details   string `json:"Details"`
		ErrorType string `json:"ErrorType"`
	}
)

// NewEmptyCadenceError is the default constructor for a CadenceError
//
// returns *CadenceError -> pointer to a newly initialized CadenceError
// in memory
func NewEmptyCadenceError() *CadenceError {
	return new(CadenceError)
}

// NewCadenceError is the constructor for a CadenceError
// when supplied parameters
//
// param errStr *string -> pointer to the error string
// param errorType CadenceErrorTypes -> the cadence error type
// param details *string -> pointer to the error details
func NewCadenceError(errStr *string, optParams ...interface{}) *CadenceError {
	err := NewEmptyCadenceError()
	err.String = errStr

	switch len(optParams) {
	case 1:
		if v, ok := optParams[0].(*CadenceErrorTypes); ok {
			err.SetErrorType(*v)
		} else {
			err.SetErrorType(None)
		}
		err.Details = nil

	case 2:
		if v, ok := optParams[0].(*CadenceErrorTypes); ok {
			err.SetErrorType(*v)
		} else {
			err.SetErrorType(None)
		}

		if v, ok := optParams[1].(*string); ok {
			err.Details = v
		} else {
			err.Details = nil
		}

	default:
		err.SetErrorType(None)
		err.Details = nil
	}

	return err
}

// GetErrorType gets the CadenceErrorTypes from a CadenceError
// instance
//
// returns CadenceErrorTypes -> the corresponding error type to the
// string representing the error type in a CadenceError instance
func (c *CadenceError) GetErrorType() CadenceErrorTypes {
	switch *c.ErrorType {
	case "cancelled":
		return Cancelled
	case "custom":
		return Custom
	case "generic":
		return Generic
	case "panic":
		return Panic
	case "terminated":
		return Terminated
	case "timeout":
		return Timeout
	default:
		err := fmt.Errorf("unrecognized error type %v", *c.ErrorType)
		panic(err)
	}
}

// SetErrorType sets the *string to the corresponding CadenceErrorTypes
// in a CadenceError instance
//
// param errorType CadenceErrorType -> the CadenceErrorTypes to set as a string
// in a CadenceError instance
func (c *CadenceError) SetErrorType(errorType CadenceErrorTypes) {
	var typeString string
	switch errorType {
	case Cancelled:
		typeString = "cancelled"
	case Custom:
		typeString = "custom"
	case Generic:
		typeString = "generic"
	case Panic:
		typeString = "panic"
	case Terminated:
		typeString = "terminated"
	case Timeout:
		typeString = "timeout"
	default:
		err := fmt.Errorf("unrecognized error type %s", errorType)
		panic(err)
	}

	c.ErrorType = &typeString
}

// ToString returns the string representation of a CadenceError
//
// returns string -> a CadenceError as a string (CadenceError.String field)
func (c *CadenceError) ToString() string {
	return *c.String
}
