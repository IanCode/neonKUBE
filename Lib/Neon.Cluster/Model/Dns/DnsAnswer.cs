//-----------------------------------------------------------------------------
// FILE:	    DnsAnswer.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:	Copyright (c) 2016-2018 by neonFORGE, LLC.  All rights reserved.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;

using Neon.Net;
using System.Net;

namespace Neon.Cluster
{
    /// <summary>
    /// Holds information about a DNS lookup persisted to Consul as part of
    /// the neonCLUSTER Dynamic DNS implementation.  These records hold the
    /// answers generated by the <b>neon-dns-mon</b> service.
    /// </summary>
    public class DnsAnswer
    {
        private string      hostname;
        private int         ttl;

        /// <summary>
        /// The target hostname.
        /// </summary>
        [JsonProperty(PropertyName = "Hostname", Required = Required.Always)]
        public string Hostname
        {
            get { return hostname; }

            set
            {
                Covenant.Requires<ArgumentNullException>(!string.IsNullOrEmpty(value));

                hostname = value.ToLowerInvariant();
            }
        }

        /// <summary>
        /// The current IP address for the target.
        /// </summary>
        [JsonProperty(PropertyName = "Address", Required = Required.Always)]
        public IPAddress Address { get; set; }

        /// <summary>
        /// The DNS TTL in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "Ttl", Required = Required.Always)]
        public int Ttl
        {
            get { return ttl; }

            set
            {
                Covenant.Requires<ArgumentException>(value >= 0, $"DNS [TTL={value}] is not valid.");

                ttl = value;
            }
        }
    }
}
