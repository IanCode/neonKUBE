<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <RootNamespace>NeonCli</RootNamespace>
    <AssemblyName>neon</AssemblyName>
    <LangVersion>latest</LangVersion>
    <ServerGarbageCollection>false</ServerGarbageCollection>
    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>
    <RuntimeIdentifiers>win10-x64;ubuntu.16.04-x64</RuntimeIdentifiers>
    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>
    <RunPostBuildEvent>OnOutputUpdated</RunPostBuildEvent>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\neon.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\neon.xml</DocumentationFile>
  </PropertyGroup>

  <Import Project="..\..\Lib\Neon.Global\Neon.Global.projitems" Label="Shared" />

  <ItemGroup>
    <Compile Remove="Resources\CoreOS\source\**" />
    <EmbeddedResource Remove="Resources\CoreOS\source\**" />
    <None Remove="Resources\CoreOS\source\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove=".rnd" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="GitInfo" Version="2.0.20">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="System.Diagnostics.StackTrace" Version="4.3.0" />
    <PackageReference Include="System.Runtime" Version="4.3.0" />
    <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
    <PackageReference Include="System.Security.Principal.Windows" Version="4.5.1" />
    <PackageReference Include="System.ValueTuple" Version="4.5.0" />
    <PackageReference Include="YamlDotNet" Version="5.2.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Lib\Neon.Kube.Aws\Neon.Kube.Aws.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.Azure\Neon.Kube.Azure.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.Google\Neon.Kube.Google.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.Hosting\Neon.Kube.Hosting.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.HyperVDev\Neon.Kube.HyperVDev.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.HyperV\Neon.Kube.HyperV.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.Machine\Neon.Kube.Machine.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Common\Neon.Common.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Couchbase\Neon.Couchbase.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Docker\Neon.Docker.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube.Xen\Neon.Kube.Xen.csproj" />
    <ProjectReference Include="..\..\Lib\Neon.Kube\Neon.Kube.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Update="Resources\Elasticsearch\logstash-template.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\archive\setup-disk.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\conf\hive.conf.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\conf\cluster.conf.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-apt-proxy.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-apt-proxy.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-apt-ready.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-consul-proxy.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-consul-proxy.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-consul-server.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-consul-server.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-disk.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-docker.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-docker.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-dotnet.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-environment.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-environment.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-exists.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-exists.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-node.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-node.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-ntp.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-ntp.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-prep-node.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-prep-node.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-ssd.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-ssd.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-utility.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-utility.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-vault-client.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-vault-client.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\setup\setup-vault-server.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\setup\setup-vault-server.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\tools\docker-volume-create.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\tools\docker-volume-create.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\tools\docker-volume-exists.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\tools\docker-volume-exists.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\tools\docker-volume-rm.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Linux\Ubuntu-16.04\tools\docker-volume-rm.sh.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\tools\safe-apt-get.sh">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="Resources\CoreOS\updates\010297_010298.zip">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="if not exist &quot;$(NF_BUILD)&quot; mkdir &quot;$(NF_BUILD)&quot;&#xD;&#xA;pubcore &quot;$(ProjectPath)&quot; &quot;$(TargetName)&quot; &quot;$(ConfigurationName)&quot; &quot;$(TargetPath)&quot; &quot;$(NF_BUILD)&quot; win10-x64" />
  </Target>

</Project>
